/* com.github.hannenz.typebreaker-indicator.vapi generated by valac 0.34.9, do not modify. */

namespace TypeBreaker {
	[CCode (cheader_filename = "Indicator.h")]
	public class Indicator : Wingpanel.Indicator {
		public static TypeBreaker.Settings settings;
		public Indicator ();
		public override void closed ();
		public override Gtk.Widget get_display_widget ();
		public override Gtk.Widget? get_widget ();
		public override void opened ();
	}
	[CCode (cheader_filename = "Indicator.h")]
	public class Settings : Granite.Services.Settings {
		public Settings ();
		public bool active { get; set; }
		public int active_time { get; set; }
		public int break_time { get; set; }
		public int postpone_time { get; set; }
		public int postpones_count { get; set; }
		public int warn_time { get; set; }
	}
	[CCode (cheader_filename = "Indicator.h")]
	public class SettingsDialog : Gtk.Dialog {
		protected TypeBreaker.TimePeriodWidget active_time_widget;
		protected TypeBreaker.TimePeriodWidget break_time_widget;
		protected TypeBreaker.TimePeriodWidget postpone_time_widget;
		protected Gtk.SpinButton postpones_count_spin_button;
		protected GLib.Settings settings;
		protected TypeBreaker.TimePeriodWidget warn_time_widget;
		public SettingsDialog ();
	}
	[CCode (cheader_filename = "Indicator.h")]
	public class TimePeriodWidget : Gtk.Bin {
		protected Gtk.Box box;
		protected Gtk.SpinButton hours_spin_button;
		protected Gtk.SpinButton minutes_spin_button;
		protected Gtk.SpinButton seconds_spin_button;
		public bool show_seconds;
		protected uint time_value;
		public TimePeriodWidget (uint time_value, bool show_seconds = false);
		public uint get_time_value ();
		protected void update_time_value ();
		public signal void value_changed (uint time_value);
	}
	[CCode (cheader_filename = "Indicator.h")]
	public class TimeString {
		protected uint hrs;
		protected uint mins;
		protected uint secs;
		public TimeString ();
		public string formatted (uint seconds, bool output_null = true);
		public string nice (uint seconds);
		public string nice_short (uint seconds);
		public bool show_seconds { get; set; }
	}
}
[CCode (cheader_filename = "Indicator.h")]
public static Wingpanel.Indicator? get_indicator (GLib.Module module, Wingpanel.IndicatorManager.ServerType server_type);
