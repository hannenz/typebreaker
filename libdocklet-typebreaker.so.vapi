/* libdocklet-typebreaker.so.vapi generated by valac 0.34.9, do not modify. */

namespace TypeBreaker {
	[CCode (cheader_filename = "src/TypeBreakerDocklet.h")]
	public class BreakWindow : Gtk.Window {
		public BreakWindow (uint break_time, uint postpones, uint postpone_time);
		public bool on_draw (Cairo.Context context);
		public void setup_background ();
		public void start_countdown ();
		public void stop_countdown ();
		public signal void countdown_finished ();
		public signal void exit_application ();
		public signal void lock_screen_requested ();
		public signal void postpone_requested ();
	}
	[CCode (cheader_filename = "src/TypeBreakerDocklet.h")]
	public class Breaker : GLib.Object {
		public uint break_time;
		public global::TypeBreaker.BreakWindow break_window;
		public global::TypeBreaker.KeyGrabber key_grabber;
		public uint postpone_time;
		public uint postpones;
		public uint seconds_elapsed;
		public uint warn_time;
		public uint work_time;
		public Breaker (Gtk.Application? app);
		public void do_notify (string message, GLib.FileIcon icon, string id);
		protected bool main_poll ();
		public void run ();
		public void take_break ();
		public signal void quit ();
	}
	[CCode (cheader_filename = "src/TypeBreakerDocklet.h")]
	public class Countdown {
		protected uint seconds_left;
		protected uint timer;
		public Countdown (uint seconds);
		public bool on_interval ();
		protected void setup ();
		public void start ();
		public void stop ();
		public uint interval { get; set; }
		public uint microseconds { get; set; }
		public double progress { get; set; }
		public signal void finished ();
		public signal void microtick (uint microseconds_left, double progress);
		public signal void tick (uint seconds_count, double progress);
	}
	[CCode (cheader_filename = "src/TypeBreakerDocklet.h")]
	public class CountdownClock : Gtk.DrawingArea {
		protected global::TypeBreaker.Countdown countdown;
		protected double progress;
		protected uint seconds_left;
		public CountdownClock (uint seconds);
		public override bool draw (Cairo.Context cr);
		public void start ();
		public uint radius { get; set; }
		public signal void finished ();
	}
	[CCode (cheader_filename = "src/TypeBreakerDocklet.h")]
	public class KeyGrabber : GLib.Object {
		public uint break_time;
		public KeyGrabber (uint break_time);
		public uint get_idle_time ();
		public uint interval { get; set; }
		public global::TypeBreaker.State state { get; set; }
		public signal void activity_begin ();
		public signal void break_completed ();
		public signal void idle_begin ();
	}
	[CCode (cheader_filename = "src/TypeBreakerDocklet.h")]
	public class ScreenLocker {
		public GLib.DBusProxy screensaver_proxy;
		public ScreenLocker ();
		public void @lock ();
	}
	[CCode (cheader_filename = "src/TypeBreakerDocklet.h")]
	public class SettingsDialog : Gtk.Dialog {
		protected Gtk.SpinButton break_time_hours_spin_button;
		protected Gtk.SpinButton break_time_minutes_spin_button;
		protected Gtk.SpinButton break_time_seconds_spin_button;
		protected Gtk.SpinButton postpone_time_hours_spin_button;
		protected Gtk.SpinButton postpone_time_minutes_spin_button;
		protected Gtk.SpinButton postpone_time_seconds_spin_button;
		protected Gtk.SpinButton postpones_count_spin_button;
		protected GLib.Settings settings;
		protected Gtk.SpinButton warn_time_hours_spin_button;
		protected Gtk.SpinButton warn_time_minutes_spin_button;
		protected Gtk.SpinButton warn_time_seconds_spin_button;
		protected Gtk.SpinButton work_time_hours_spin_button;
		protected Gtk.SpinButton work_time_minutes_spin_button;
		protected Gtk.SpinButton work_time_seconds_spin_button;
		public SettingsDialog ();
	}
	[CCode (cheader_filename = "src/TypeBreakerDocklet.h")]
	public class TimeString {
		protected uint hrs;
		protected uint mins;
		protected uint secs;
		public TimeString ();
		public string formatted (uint seconds, bool output_null = true);
		public string nice (uint seconds);
		public string nice_short (uint seconds);
	}
	[CCode (cheader_filename = "src/TypeBreakerDocklet.h")]
	public class TypeBreaker : Gtk.Application {
		public TypeBreaker ();
		protected override void activate ();
	}
	[CCode (cheader_filename = "src/TypeBreakerDocklet.h")]
	public class TypeBreakerDockItem : Plank.DockletItem {
		public Gdk.Pixbuf icon_pixbuf;
		public global::TypeBreaker.TypeBreakerPreferences prefs;
		public TypeBreakerDockItem ();
		protected override void draw_icon (Plank.Surface surface);
		public override Gee.ArrayList<Gtk.MenuItem> get_menu_items ();
		protected override Plank.AnimationType on_clicked (Plank.PopupButton button, Gdk.ModifierType mod, uint32 event_time);
		public TypeBreakerDockItem.with_dockitem_file (GLib.File file);
	}
	[CCode (cheader_filename = "src/TypeBreakerDocklet.h")]
	public class TypeBreakerDocklet : GLib.Object, Plank.Docklet {
		public TypeBreakerDocklet ();
	}
	[CCode (cheader_filename = "src/TypeBreakerDocklet.h")]
	public class TypeBreakerPreferences : Plank.DockItemPreferences {
		public TypeBreakerPreferences ();
		protected override void reset_properties ();
		public TypeBreakerPreferences.with_file (GLib.File file);
		[Description (blurb = "Number of foo-bars", nick = "foo-bar-count")]
		public int FooBarCount { get; set; }
	}
	[CCode (cheader_filename = "src/TypeBreakerDocklet.h")]
	public enum State {
		IDLE,
		ACTIVE
	}
	[CCode (cheader_filename = "src/TypeBreakerDocklet.h")]
	public const string G_RESOURCE_PATH;
}
[CCode (cheader_filename = "src/TypeBreakerDocklet.h")]
public static void docklet_init (Plank.DockletManager manager);
